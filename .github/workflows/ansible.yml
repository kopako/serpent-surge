name: Ansible

on:
  workflow_run:
    workflows: ["Terraform"]
    types: [completed]

jobs:
  ansible:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout repo to github runer 
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download terraform state file
      run: aws s3 cp s3://serpent-surge-s3/network/terraform.tfstate ./
    
    - name: Extract ec2_endpoint value
      run: echo "EC2_ENDPOINT=$(jq -e ".outputs.ec2_endpoint.value" terraform.tfstate)" >> $GITHUB_ENV
    
    - name: Extract rds_endpoint value
      run: echo "RDS_ENDPOINT=$(jq -e ".outputs.rds_endpoint.value" terraform.tfstate)" >> $GITHUB_ENV

    - name: Configure Ansible
      run: |
        sudo apt update
        sudo pipx inject ansible-core jmespath
        ansible-playbook --version
        echo "[awshosts]" >> ansible_hosts
        echo $EC2_ENDPOINT >> ansible_hosts
        mv ansible_hosts $HOME/work/serpent-surge/serpent-surge/ansible/ansible_hosts
        cat $HOME/work/serpent-surge/serpent-surge/ansible/ansible_hosts

    - name: Clone repo to remote server
      uses: dawidd6/action-ansible-playbook@v4
      with:
        directory: ansible/
        playbook: git_clone.yaml
        key: ${{secrets.SSH_PRIVATE_KEY}}
        options: |
          --verbose
          --user ubuntu
          --inventory ansible_hosts
    
    - name: Install docker
      uses: dawidd6/action-ansible-playbook@v4
      with:
        directory: ansible/
        playbook: docker_install.yaml
        key: ${{secrets.SSH_PRIVATE_KEY}}
        options: |
          --verbose
          --user ubuntu
          --inventory ansible_hosts

    - name: Prepare env file
      run: |
        cat << EOF > .env
        DB_HOST: ${{env.RDS_ENDPOINT}}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_NAME: "serpent_surge_db"
        PUBLIC_DNS_NAME: "kopakoserpent.ddns.net"
        CERTBOT_EMAIL: "kopandima@gmail.com"
        FRONTEND_PORT: "443"
        FRONTEND_IMAGE: "jonasal/nginx-certbot:latest"
        FRONTEND_CONF: "../game/serpent-surge-main/nginx/game-prod.conf"
        EOF
      working-directory: ansible/

    - name: Ansible copy file to remote
      uses: dawidd6/action-ansible-playbook@v4
      with:
        directory: ansible/
        playbook: copy_env.yaml
        key: ${{secrets.SSH_PRIVATE_KEY}}
        options: |
          --user ubuntu
          --verbose
          --inventory ansible_hosts
    
    - name: Create DB table
      uses: dawidd6/action-ansible-playbook@v4
      with:
        directory: ansible/
        playbook: aws_mysql_client.yaml
        key: ${{secrets.SSH_PRIVATE_KEY}}
        options: |
          --user ubuntu
          --verbose
          --extra-vars db_superuser=${{ secrets.DB_SUPERUSER }} db_superpass=${{ secrets.DB_SUPERPASSWORD }} db_host=${{ env.RDS_ENDPOINT }} db_user=${{ secrets.DB_USER }} db_pass=${{ secrets.DB_PASSWORD }} db_name=serpent_surge_db db_table=scores
          --inventory ansible_hosts
      
    - name: Create backup service
      uses: dawidd6/action-ansible-playbook@v4
      with:
        directory: ansible/
        playbook: backup.yaml
        key: ${{secrets.SSH_PRIVATE_KEY}}
        options: |
          --user ubuntu
          --verbose
          --inventory ansible_hosts
          --extra-vars db_user=${{ secrets.DB_USER }} db_pass=${{ secrets.DB_PASSWORD }} 

    - name: Ansible Docker compose up
      uses: dawidd6/action-ansible-playbook@v4
      with:
        directory: ansible/
        playbook: docker_compose_up.yaml
        key: ${{secrets.SSH_PRIVATE_KEY}}
        options: |
          --user ubuntu
          --verbose
          --inventory ansible_hosts
